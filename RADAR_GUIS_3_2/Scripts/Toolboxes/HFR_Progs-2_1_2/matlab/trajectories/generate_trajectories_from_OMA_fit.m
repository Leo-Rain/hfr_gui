function T = generate_trajectories_from_OMA_fit( Toma, modes_fn, tspan, ...
                                                 LL, options, odesolver )
% GENERATE_TRAJECTORIES_FROM_OMA_FIT  Uses the alpha stored in a TUV
% structure generated by OMA fits to create Lagrangian trajectories
%
% Usage: TRAJ = generate_trajectories_from_OMA_fit( TUVoma, ...
%                         modes_filename, tspan, LL, options, odesolver )
%
% This functions is quite close to being a driver, but is so convenient
% that I decided to keep it.  It uses the alpha in an OMA TUV structure,
% combined with a mat-file containing the original modes data, to
% generate trajectories.
%
% Inputs
% ------
% TUVoma = A TUV structure generated by fit_OMA_modes_to_*.  This can
%          also be a cell array, in which case the first element must be
%          the timestamps and the second element must be the OMA_alpha,
%          both of which should be in the same format as they would be in
%          a TUV structure.
% modes_filename = name of file with modes information.
% tspan, LL, options, odesolver = these are as in
%          particle_track_ode_tri_LonLat, with the exception that the
%          default options will be set so that tracks tend to come out OK
%          for normal mid-latitude domains.
%
% Outputs
% -------
% TRAJ = a TRAJ structure with the particle trajectories.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% 	$Id: generate_trajectories_from_OMA_fit.m 396 2007-04-02 16:56:29Z mcook $	
%
% Copyright (C) 2006 David M. Kaplan
% Licence: GPL
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Defaults
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if ~exist( 'odesolver', 'var' )
  odesolver = ''; % Let particle_track function figure it out.
end

% These give some very basic tolerances that should work, but need to be
% tested.  In particular, the abs_tol and rel_tol might be too strict.
if ~exist( 'options', 'var' )
  abs_tol = 1.0e-3; % Not sure about this
  rel_tol = 1.0e-3; % Not sure about this
  maxstep = 1/24/2; % 1/2 hour
  
  options = odeset('RelTol',rel_tol,'AbsTol',abs_tol,'MaxStep',maxstep);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Get important stuff from Toma
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if isstruct(Toma)
  ts = Toma.TimeStamp;
  alpha = Toma.OtherTemporalVars.OMA_alpha;
  dn = Toma.DomainName;
else
  ts = Toma{1};
  alpha = Toma{2};
  dn = '';
end

clear Toma

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Load necessary stuff from modes file
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
m = load( modes_fn, 'pLonLat', 't', 'ux_tri', 'uy_tri' );

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Do tracking and put things in TRAJ structure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
T = ptrack2TRAJstruct( 'particle_track_ode_tri_LonLat', m.pLonLat, m.t, ...
                       m.ux_tri * alpha, m.uy_tri * alpha, ts, tspan, LL, ...
                       options, odesolver );

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Some extra metadata
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
T.Type = 'Trajectories_from_OMA_fits';
T.TrajectoryDomain = dn;

T.OtherMetadata.(mfilename).options = options;
T.OtherMetadata.(mfilename).odesolver = odesolver;
T.OtherMetadata.(mfilename).modes_filename = modes_fn;
